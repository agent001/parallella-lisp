/* fl-device.c */
void itos(int i, char *buf);
int stoi(char *snum);
void appendString(char *item);
void appendStrings(int count, ...);
void appendInt(int num, char bool);
void setflag(void);
string *smalloc(void);
namestr *nmalloc(void);
node *omalloc(void);
node *newnode(enum ltype type);
node *sym(char *n);
node *cons(node *head, node *tail);
node *pair(node *head, node *tail);
node *func(node *(*fn)(node *, node *), enum ltype type);
node *lambda(node *args, node *sexp);
node *integer(int num);
node *newcontext(node *bindings);
void clear_bindings(node *env);
node *lastcell(node *list);
node *append(node *list, node *obj);
node *concat(node *l1, node *l2);
void atl(node **l, node *item);
void add_pair(node *head, node *tail, node **list);
void pushNode(node *item, node **stk);
node *popNode(node **stk);
node *nextarg(node **pargs);
char *name(node *o);
node *assq(char *key, node *list);
node *lookupsym(char *name, node *env);
node *make_env(node *vars, node *vals, node *env);
node *el_car(node *args, node *env);
node *el_cdr(node *args, node *env);
node *el_nilp(node *args, node *env);
node *el_quote(node *args, node *env);
node *el_cons(node *args, node *env);
node *el_equal(node *args, node *env);
node *el_atom(node *args, node *env);
node *el_cond(node *args, node *env);
node *el_if(node *args, node *env);
node *el_lambda(node *args, node *env);
node *el_label(node *args, node *env);
node *el_ldefine(node *args, node *env);
node *el_append(node *args, node *env);
node *el_concat(node *args, node *env);
node *el_loop(node *args, node *env);
node *el_block(node *args, node *env);
node *el_progn(node *args, node *env);
node *el_print(node *args, node *env);
node *el_terpri(node *args, node *env);
node *binary(node *args, int fcn);
node *compare(node *args, int fcn);
node *el_lessthan(node *args, node *env);
node *el_greaterthan(node *args, node *env);
node *el_eq(node *args, node *env);
node *el_plus(node *args, node *env);
node *el_minus(node *args, node *env);
node *el_times(node *args, node *env);
node *el_divide(node *args, node *env);
node *init_lisp(void);
void nl(void);
void prpair(node *l);
void print(node *l);
int getChar(char **s);
int ungetChar(char **s);
char *getToken(char **s, char *token);
node *tokenize(char **code);
int equal(node *sym, char *s2);
int is_valid_int(char *str);
node *makeNode(node *n);
node *_parse(node **code, char *terminator);
node *parse(node **code);
node *parse_string(char **input);
int length(node *l);
node *evlambda(node *vals, node *expr, node *env);
node *evform(node *fnode, node *exp, node *env);
node *evsym(node *exp, node *env);
node *eval_list(node *sexp, node *env);
node *eval(node *input, node *env);
void REPL(char *input);
char *readFile(char *fileName);
int coreID(unsigned int *row, unsigned int *col);
void coreInit(void);
int main(void);
